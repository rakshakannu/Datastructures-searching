// find the occurance of a given element in the sorted array

//naive

int firstOccur(int arr[], int n, int x)
{
    for(int i=0;i<n;i++)
    {
    if (arr[i]==x){
        return i;
    }
    
    return -1;
}

time: O(n)
space: O(1)

// efficient code (recursive)
// recursive binary search

int firstOccur(int arr[], int low, int high, int x)
{
    if(low>high)
		return -1; // BASE CASE
	int mid=l+(h-l)/2; // there is a possibility of overflow using mid=(l+h)/2
	
	if(arr[mid]>x)
		return binarysearch(arr,l,mid-1,x);
	else(x>arr[mid])
		return binarysearch(arr,mid+1,h,x);
  else
    if(mid==0||arr[mid-1]!=arr[mid])
        return mid;
    else
        return firstOccur(arr, low, mid-1,x); // we go to the left half of the array recursively if there is a repetitive element.
}

// efficient solution(Iterative)

static int firstOcc(int arr[], int n, int x)
	{
		int low = 0, high = n - 1;

		while(low <= high)
		{
			int mid = (low + high) / 2;

			if(x > arr[mid])
				low = mid + 1;

			else if(x < arr[mid])
				high = mid - 1;

			else
			{
				if(mid == 0 || arr[mid - 1] != arr[mid])
					return mid;

				else
					high = mid - 1;
			}

		}

		return -1;
	}
